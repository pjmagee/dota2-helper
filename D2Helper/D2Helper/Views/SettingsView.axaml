<UserControl
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:D2Helper.ViewModels"
    xmlns:fluent="clr-namespace:FluentIcons.Avalonia.Fluent;assembly=FluentIcons.Avalonia.Fluent"
    xmlns:models="clr-namespace:D2Helper.Models"
    xmlns:design="clr-namespace:D2Helper.Design"
    mc:Ignorable="d"
    d:DesignHeight="600" d:DesignWidth="800"
    d:DataContext="{x:Type vm:SettingsViewModel}"
    x:Class="D2Helper.Views.SettingsView"
    x:Name="SettingsUserControl"
    x:DataType="vm:SettingsViewModel">
    <Design.DataContext>
        <design:DesignSettingsViewModel />
    </Design.DataContext>
    <StackPanel Orientation="Vertical" Spacing="5" Margin="5" HorizontalAlignment="Left">
        <StackPanel Orientation="Horizontal" Margin="5" Width="280" Spacing="10" HorizontalAlignment="Left">
            <TextBlock Text="Volume" VerticalAlignment="Center" Margin="0" />
            <Slider Width="200" Minimum="0" Maximum="100" IsSnapToTickEnabled="True"
                    TickFrequency="5" TickPlacement="BottomRight"
                    Value="{Binding Volume, Mode=TwoWay}" />
            <TextBlock Text="{Binding Volume, Mode=OneWay}"
                       VerticalAlignment="Center" />
        </StackPanel>
        <TabControl>
            <TabItem Header="Timers">
                <StackPanel Orientation="Vertical" Margin="0 10" Spacing="5">
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <DataGrid ItemsSource="{Binding Timers, Mode=OneWay}"
                                  GridLinesVisibility="All"
                                  BorderBrush="Black"
                                  CanUserSortColumns="False"
                                  BorderThickness="0.5"
                                  MaxHeight="400"
                                  SelectedItem="{Binding SelectedTimerViewModel}"
                                  SelectionMode="Single"
                                  HorizontalScrollBarVisibility="Auto">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Name" Binding="{Binding Name}" />
                                <DataGridTemplateColumn Header="Time">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <TimePicker UseSeconds="True" SelectedTime="{Binding Time}">
                                                <TimePicker.Resources>
                                                    <x:Double x:Key="TimePickerThemeMinWidth">120</x:Double>
                                                </TimePicker.Resources>
                                            </TimePicker>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridCheckBoxColumn Header="Enabled" Binding="{Binding IsEnabled}" />
                                <DataGridTemplateColumn>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                           <StackPanel Orientation="Horizontal">
                                               <Button Width="30" Height="30"
                                                       HorizontalContentAlignment="Center"
                                                       VerticalContentAlignment="Center"
                                                       Padding="2"
                                                       Command="{Binding $parent[DataGrid].((vm:SettingsViewModel)DataContext).DeleteCommand}"
                                                       CommandParameter="{Binding}">
                                                   <Button.Content>
                                                       <fluent:SymbolIcon Symbol="Delete" />
                                                   </Button.Content>
                                               </Button>
                                           </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <!-- <DataGridTemplateColumn> -->
                                <!--     <DataGridTemplateColumn.CellTemplate> -->
                                <!--         <DataTemplate> -->
                                <!--            <StackPanel Orientation="Horizontal"> -->
                                <!--                 ~1~ Move up @1@ -->
                                <!--                 <Button Width="30" Height="30" -->
                                <!--                         HorizontalContentAlignment="Center" -->
                                <!--                         VerticalContentAlignment="Center" -->
                                <!--                         Padding="2" -->
                                <!--                         Command="{Binding $parent[DataGrid].((vm:SettingsViewModel)DataContext).MoveUpCommand}" -->
                                <!--                         CommandParameter="{Binding}"> -->
                                <!--                     <Button.Content> -->
                                <!--                          <fluent:SymbolIcon Symbol="ArrowUp" /> -->
                                <!--                     </Button.Content> -->
                                <!--                 </Button> -->
                                <!--                  ~1~ Move down @1@ -->
                                <!--                 <Button Width="30" Height="30" -->
                                <!--                         HorizontalContentAlignment="Center" -->
                                <!--                         VerticalContentAlignment="Center" -->
                                <!--                         Padding="2" -->
                                <!--                         Command="{Binding $parent[DataGrid].((vm:SettingsViewModel)DataContext).MoveDownCommand}" -->
                                <!--                         CommandParameter="{Binding}"> -->
                                <!--                     <Button.Content> -->
                                <!--                         <fluent:SymbolIcon Symbol="ArrowDown" /> -->
                                <!--                     </Button.Content> -->
                                <!--                 </Button> -->
                                <!--            </StackPanel> -->
                                <!--         </DataTemplate> -->
                                <!--     </DataGridTemplateColumn.CellTemplate> -->
                                <!-- </DataGridTemplateColumn> -->
                            </DataGrid.Columns>
                        </DataGrid>
                          <StackPanel Orientation="Vertical" Margin="0">
                                <StackPanel Orientation="Vertical" Margin="5">
                                    <TextBlock Text="Name" VerticalAlignment="Center" />
                                    <TextBox Text="{Binding SelectedTimerViewModel.Name, Mode=TwoWay}" />
                                </StackPanel>
                                <!-- <StackPanel Orientation="Vertical" Margin="5"> -->
                                <!--     <ToolTip.Tip> -->
                                <!--         The text that will be spoken when the timer triggers. -->
                                <!--     </ToolTip.Tip> -->
                                <!--     <TextBlock Text="Speech" VerticalAlignment="Center" /> -->
                                <!--     <TextBox Text="{Binding SelectedTimerViewModel.Speech, Mode=TwoWay}" /> -->
                                <!-- </StackPanel> -->
                                <StackPanel Orientation="Vertical" Margin="5">
                                    <ToolTip.Tip>
                                        If the timer is an interval timer, this is the time between each trigger.
                                        If the timer is not an interval timer, when game seconds or minutes = this time, the timer will trigger.
                                    </ToolTip.Tip>
                                    <TextBlock Text="Time" VerticalAlignment="Center" />
                                    <TimePicker UseSeconds="True" SelectedTime="{Binding SelectedTimerViewModel.Time, Mode=TwoWay}" />
                                </StackPanel>
                                <StackPanel Orientation="Vertical" Margin="5">
                                    <ToolTip.Tip>
                                        When the timer will become active and begin to trigger based on the game time
                                    </ToolTip.Tip>
                                    <TextBlock Text="Starts at" VerticalAlignment="Center" />
                                    <TimePicker UseSeconds="True" SelectedTime="{Binding SelectedTimerViewModel.ShowAfter, Mode=TwoWay}" />
                                </StackPanel>
                                <StackPanel Orientation="Vertical" Margin="5">
                                    <ToolTip.Tip>
                                        When the timer will disable itself, and no longer trigger based on the game.
                                        For example, pulling or stacking camps becomes less meaningful after a certain time.
                                    </ToolTip.Tip>
                                    <TextBlock Text="Expires after" VerticalAlignment="Center" />
                                    <TimePicker
                                        UseSeconds="True"
                                        SelectedTime="{Binding SelectedTimerViewModel.HideAfter, Mode=TwoWay}" />
                                </StackPanel>
                                <StackPanel Orientation="Vertical" Margin="5" Spacing="5">
                                    <ToolTip.Tip>
                                        The audio file that will be played when the timer triggers if Text to Speech is disabled.
                                    </ToolTip.Tip>
                                    <TextBlock Text="Audio file" />
                                    <TextBox IsReadOnly="True" Text="{Binding SelectedTimerViewModel.AudioFile, Mode=OneWay}" />
                                    <StackPanel Orientation="Horizontal" Spacing="5">
                                        <Button Content="Browse"
                                                Command="{Binding SelectFileCommand}"
                                                CommandParameter="{Binding ElementName=SettingsUserControl }" />
                                        <Button Content="Play"
                                                Command="{Binding PlayAudioFileCommand}"
                                                CommandParameter="{Binding ElementName=SettingsUserControl }" />
                                    </StackPanel>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <StackPanel Orientation="Vertical" Margin="5">
                                        <TextBlock Text="Enabled" VerticalAlignment="Center" />
                                        <CheckBox IsChecked="{Binding SelectedTimerViewModel.IsEnabled, Mode=TwoWay}" />
                                    </StackPanel>
                                    <StackPanel Orientation="Vertical" Margin="5">
                                        <TextBlock Text="Muted" VerticalAlignment="Center" />
                                        <CheckBox IsChecked="{Binding SelectedTimerViewModel.IsMuted, Mode=TwoWay}" />
                                    </StackPanel>
                                    <StackPanel Orientation="Vertical" Margin="5">
                                        <TextBlock Text="Interval" VerticalAlignment="Center" />
                                        <CheckBox IsChecked="{Binding SelectedTimerViewModel.IsInterval, Mode=TwoWay}" />
                                    </StackPanel>
                                    <StackPanel Orientation="Vertical" Margin="5">
                                        <ToolTip.Tip>
                                            Requires manual reset after each trigger.
                                            This is useful for timers that are not based on a set interval. e.g Roshan or Tormentor respawn times.
                                        </ToolTip.Tip>
                                        <TextBlock Text="Manual" VerticalAlignment="Center" />
                                        <CheckBox IsChecked="{Binding SelectedTimerViewModel.IsManualReset, Mode=TwoWay}" />
                                    </StackPanel>
                                </StackPanel>
                            </StackPanel>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <Button Width="120" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding Add}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <fluent:SymbolIcon Symbol="Add" />
                                    <TextBlock Text="Add timer" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                        <Button Width="120" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding Reset}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <fluent:SymbolIcon Symbol="BookDefault" />
                                    <TextBlock Text="Reset timers" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="Integration" IsSelected="True">

                <StackPanel Margin="0 10" Orientation="Vertical">

                    <Grid Margin="5" RowDefinitions="*,*,*,*" ColumnDefinitions="100,Auto" VerticalAlignment="Center">

                        <Label Grid.Row="0" Grid.Column="0" VerticalAlignment="Center">Mode</Label>
                        <ComboBox Grid.Row="0" Grid.Column="1"
                                  SelectedItem="{Binding SelectedTimerMode, Mode=TwoWay}"
                                  ItemsSource="{Binding TimerModes, Mode=OneTime}"
                                  Width="150">
                            <ComboBox.ItemTemplate>
                                <DataTemplate DataType="models:TimerStrategy">
                                    <TextBlock Text="{Binding Name}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <Label Grid.Row="1" Grid.Column="0" VerticalAlignment="Center">Demo Muted</Label>
                        <CheckBox Grid.Row="1" Grid.Column="1" VerticalAlignment="Center"
                                  IsChecked="{Binding DemoMuted, Mode=TwoWay}" />

                        <Label Grid.Row="2" Grid.Column="0" VerticalAlignment="Center">Status</Label>
                        <TextBlock Grid.Row="2" Grid.Column="1"
                                   VerticalAlignment="Center"
                                   Text="{Binding Status}" TextWrapping="Wrap" />

                        <Label Grid.Row="3" Grid.Column="0" VerticalAlignment="Center">Location</Label>
                        <TextBlock Grid.Row="3" Grid.Column="1"
                                   VerticalAlignment="Center"
                                   Text="{Binding InstallPath}"
                                   TextWrapping="WrapWithOverflow" />
                    </Grid>

                    <StackPanel Margin="5" Orientation="Vertical" Spacing="5">
                        <Button Width="140" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding InstallCommand}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <TextBlock Text="Install GSI" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                        <Button Width="140" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding InstallCommand}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <TextBlock Text="Open Folder" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                        <Button Width="140" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding InstallCommand}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <TextBlock Text="Uninstall GSI" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </StackPanel>
            </TabItem>
        </TabControl>
    </StackPanel>
</UserControl>