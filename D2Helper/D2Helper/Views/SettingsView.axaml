<UserControl
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:D2Helper.ViewModels"
    xmlns:fluent="clr-namespace:FluentIcons.Avalonia.Fluent;assembly=FluentIcons.Avalonia.Fluent"
    mc:Ignorable="d"
    d:DesignWidth="700" d:DesignHeight="610"
    d:DataContext="{x:Type vm:SettingsViewModel}"
    x:Class="D2Helper.Views.SettingsView"
    x:Name="SettingsUserControl"
    x:DataType="vm:SettingsViewModel">
    <Design.DataContext>
        <vm:SettingsViewModel />
    </Design.DataContext>
    <StackPanel
        Orientation="Vertical"
        Spacing="5"
        Margin="5"
        HorizontalAlignment="Center">

        <StackPanel Orientation="Horizontal">
            <StackPanel
                Orientation="Horizontal"
                Margin="5"
                Width="280"
                Spacing="5">
                <TextBlock Text="Volume" VerticalAlignment="Center" Margin="0" />
                <Slider
                    Width="200" Minimum="0" Maximum="100" IsSnapToTickEnabled="True"
                    TickFrequency="5" TickPlacement="BottomRight"
                    Value="{Binding TimerVolume, Mode=TwoWay}" />
                <TextBlock Text="{Binding TimerVolume, Mode=OneWay}" VerticalAlignment="Center" />
            </StackPanel>
            <StackPanel
                Orientation="Horizontal" Margin="5"
                Spacing="5"
                VerticalAlignment="Center"
                HorizontalAlignment="Center">
                <TextBlock Text="Mode" VerticalAlignment="Center" />
                <ComboBox
                    Width="200">
                    <ComboBoxItem Content="Auto" />
                    <ComboBoxItem Content="Game Time" />
                    <ComboBoxItem Content="Demo Time" />
                </ComboBox>
            </StackPanel>
        </StackPanel>
        <StackPanel Orientation="Horizontal">
        </StackPanel>
        <StackPanel Orientation="Horizontal" Spacing="5">
            <DataGrid ItemsSource="{Binding Timers}"
                      GridLinesVisibility="All"
                      BorderBrush="Black"
                      BorderThickness="0.5"
                      MaxHeight="400"
                      SelectedItem="{Binding SelectedTimer}"
                      SelectionMode="Single"
                      RowDetailsVisibilityMode="VisibleWhenSelected"
                      HorizontalScrollBarVisibility="Auto">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Name" Binding="{Binding Name}" />
                    <!-- When the game Time = this Time, the timer will trigger -->
                    <DataGridTemplateColumn Header="Time">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TimePicker
                                    UseSeconds="True"
                                    SelectedTime="{Binding Every}">
                                    <TimePicker.Resources>
                                        <x:Double x:Key="TimePickerThemeMinWidth">120</x:Double>
                                    </TimePicker.Resources>
                                </TimePicker>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridCheckBoxColumn
                        Header="Enabled"
                        Binding="{Binding IsEnabled}" />

                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Width="30" Height="30"
                                        HorizontalContentAlignment="Center"
                                        VerticalContentAlignment="Center"
                                        Padding="2"
                                        Command="{Binding $parent[DataGrid].((vm:SettingsViewModel)DataContext).DeleteCommand}"
                                        CommandParameter="{Binding}">
                                    <Button.Content>
                                        <fluent:SymbolIcon Symbol="Delete" />
                                    </Button.Content>
                                </Button>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>

            <StackPanel
                Orientation="Vertical">
                <StackPanel Orientation="Vertical" Margin="0">

                    <!-- Name -->
                    <StackPanel Orientation="Vertical" Margin="5">
                        <TextBlock Text="Name" VerticalAlignment="Center" />
                        <TextBox Text="{Binding SelectedTimer.Name, Mode=TwoWay}" />
                    </StackPanel>

                    <!-- Speech -->
                    <StackPanel Orientation="Vertical" Margin="5">
                        <ToolTip.Tip>
                            The text that will be spoken when the timer triggers.
                        </ToolTip.Tip>
                        <TextBlock Text="Speech" VerticalAlignment="Center" />
                        <TextBox Text="{Binding SelectedTimer.Speech, Mode=TwoWay}" />
                    </StackPanel>

                    <!-- Time  -->
                    <StackPanel Orientation="Vertical" Margin="5">
                        <ToolTip.Tip>
                            If the timer is an interval timer, this is the time between each trigger.
                            If the timer is not an interval timer, when game seconds or minutes = this time, the timer will trigger.
                        </ToolTip.Tip>
                        <TextBlock Text="Time" VerticalAlignment="Center" />
                        <TimePicker UseSeconds="True" SelectedTime="{Binding SelectedTimer.Every, Mode=TwoWay}" />
                    </StackPanel>

                    <!-- Starts at -->
                    <StackPanel Orientation="Vertical" Margin="5">
                        <ToolTip.Tip>
                            When the timer will become active and begin to trigger based on the game time
                        </ToolTip.Tip>
                        <TextBlock Text="Starts at" VerticalAlignment="Center" />
                        <TimePicker UseSeconds="True" SelectedTime="{Binding SelectedTimer.Starts, Mode=TwoWay}" />
                    </StackPanel>

                    <!-- Expires after -->
                    <StackPanel Orientation="Vertical" Margin="5">
                        <ToolTip.Tip>
                            When the timer will disable itself, and no longer trigger based on the game.
                            For example, pulling or stacking camps becomes less meaningful after a certain time.
                        </ToolTip.Tip>
                        <TextBlock Text="Expires after" VerticalAlignment="Center" />
                        <TimePicker UseSeconds="True" SelectedTime="{Binding SelectedTimer.DisableAfter, Mode=TwoWay}" />
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Margin="5" Spacing="5">
                        <ToolTip.Tip>
                            The audio file that will be played when the timer triggers if Text to Speech is disabled.
                        </ToolTip.Tip>
                        <TextBlock Text="Audio file" />
                        <TextBox IsReadOnly="True" Text="{Binding SelectedTimer.AudioFile, Mode=OneWay}" />
                        <!-- command parameter should be the View/UserControl -->
                        <Button Content="Browse"
                                Command="{Binding BrowseAudioFileCommand}"
                                CommandParameter="{Binding ElementName=SettingsUserControl }" />
                    </StackPanel>

                    <!-- boolean toggles -->

                    <StackPanel Orientation="Horizontal">
                        <!-- Enabled -->
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Enabled" VerticalAlignment="Center" />
                            <CheckBox IsChecked="{Binding SelectedTimer.IsEnabled, Mode=TwoWay}" />
                        </StackPanel>

                        <!-- Muted -->
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Muted" VerticalAlignment="Center" />
                            <CheckBox IsChecked="{Binding SelectedTimer.IsMuted, Mode=TwoWay}" />
                        </StackPanel>

                        <!-- Interval -->
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Interval" VerticalAlignment="Center" />
                            <CheckBox IsChecked="{Binding SelectedTimer.IsInterval, Mode=TwoWay}" />
                        </StackPanel>

                        <!-- Manual -->
                        <StackPanel Orientation="Vertical" Margin="5">
                            <ToolTip.Tip>
                                Requires manual reset after each trigger.
                                This is useful for timers that are not based on a set interval. e.g Roshan or Tormentor respawn times.
                            </ToolTip.Tip>
                            <TextBlock Text="Manual" VerticalAlignment="Center" />
                            <CheckBox IsChecked="{Binding SelectedTimer.IsManualReset, Mode=TwoWay}" />
                        </StackPanel>

                    </StackPanel>

                    <StackPanel Orientation="Horizontal">

                    </StackPanel>

                </StackPanel>
            </StackPanel>
        </StackPanel>
        <StackPanel Orientation="Horizontal">
            <StackPanel Orientation="Horizontal">
                <Button Width="120" Height="30"
                        HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center"
                        Padding="2"
                        Command="{Binding Add}">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal" Spacing="2">
                            <fluent:SymbolIcon Symbol="Add" />
                            <TextBlock Text="Add timer" VerticalAlignment="Center" />
                        </StackPanel>
                    </Button.Content>
                </Button>
                <Button Width="120" Height="30"
                        HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center"
                        Padding="2"
                        Command="{Binding Reset}">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal" Spacing="2">
                            <fluent:SymbolIcon Symbol="BookDefault" />
                            <TextBlock Text="Reset timers" VerticalAlignment="Center" />
                        </StackPanel>
                    </Button.Content>
                </Button>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <!-- Install GSI Button -->
                <Button Width="120" Height="30"
                        HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center"
                        Padding="2"
                        Command="{Binding InstallGSICommand}">
                    <Button.Content>
                        <StackPanel Orientation="Horizontal" Spacing="2">
                            <fluent:SymbolIcon Symbol="DocumentSettings" />
                            <TextBlock Text="Install GSI" VerticalAlignment="Center" />
                        </StackPanel>
                    </Button.Content>
                </Button>
            </StackPanel>
        </StackPanel>

        <StackPanel Orientation="Vertical" Spacing="5">
            <TextBlock Text="Game State Integration (GSI)" FontSize="14" FontWeight="Bold" />

            <Grid
                ShowGridLines="False"
                Width="600"
                HorizontalAlignment="Left">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="20*" />
                    <ColumnDefinition Width="80*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>

                <TextBlock Grid.Row="0" Grid.Column="0" Text="Status" FontWeight="Bold" TextAlignment="Left" />
                <TextBlock Grid.Row="0" Grid.Column="1" Text="No game detected" Foreground="Orange" FontWeight="Bold" />

                <TextBlock Grid.Row="1" Grid.Column="0" Text="Location" FontWeight="Bold"  TextAlignment="Left" />
                <TextBlock Grid.Row="1" Grid.Column="1" Text="E:\SteamLibrary\steamapps\common\dota 2 beta\game\dota\cfg\gamestate_integration" TextWrapping="Wrap" />
            </Grid>

        </StackPanel>

    </StackPanel>
</UserControl>