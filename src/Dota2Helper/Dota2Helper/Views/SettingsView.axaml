<UserControl
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:fluent="clr-namespace:FluentIcons.Avalonia.Fluent;assembly=FluentIcons.Avalonia.Fluent"
    xmlns:vm="clr-namespace:Dota2Helper.ViewModels"
    xmlns:design="clr-namespace:Dota2Helper.Design"
    xmlns:audio="clr-namespace:Dota2Helper.Features.Audio"
    xmlns:timers="clr-namespace:Dota2Helper.Features.Timers"
    mc:Ignorable="d"
    d:DesignHeight="600" d:DesignWidth="800"
    d:DataContext="{x:Type vm:SettingsViewModel}"
    x:Class="Dota2Helper.Views.SettingsView"
    x:Name="SettingsUserControl"
    x:DataType="vm:SettingsViewModel">
    <Design.DataContext>
        <design:DesignSettingsViewModel />
    </Design.DataContext>
    <UserControl.Resources>
        <audio:AudioFilePathConverter x:Key="AudioFilePathConverter" />
    </UserControl.Resources>
    <StackPanel Orientation="Vertical" Spacing="5" Margin="5" HorizontalAlignment="Left">
        <StackPanel Orientation="Horizontal" Margin="5" Width="280" Spacing="10" HorizontalAlignment="Left">
            <TextBlock Text="Volume" VerticalAlignment="Center" Margin="0" />
            <Slider Width="200" Minimum="0" Maximum="100" IsSnapToTickEnabled="True" TickFrequency="5" TickPlacement="BottomRight" Value="{Binding Volume, Mode=TwoWay}" />
            <TextBlock Text="{Binding Volume, Mode=OneWay}" VerticalAlignment="Center" />
        </StackPanel>
        <TabControl>
            <TabItem Header="Profiles">
                <StackPanel Orientation="Vertical" Margin="0 10" Spacing="5">
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <DataGrid ItemsSource="{Binding Profiles}"
                                  GridLinesVisibility="All"
                                  Width="400"
                                  BorderBrush="Black"
                                  CanUserSortColumns="True"
                                  BorderThickness="0.5"
                                  MaxHeight="400"
                                  SelectedItem="{Binding SelectedProfileViewModel}"
                                  SelectedIndex="{Binding SelectedProfileIndex}"
                                  SelectionMode="Single"
                                  HorizontalScrollBarVisibility="Auto">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="200" />
                                <DataGridTextColumn Header="Timers" Binding="{Binding Timers.Count}" />
                                <DataGridTemplateColumn>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Button Width="30" Height="30"
                                                    HorizontalContentAlignment="Center"
                                                    VerticalContentAlignment="Center"
                                                    Padding="2"
                                                    Command="{Binding $parent[DataGrid].((vm:SettingsViewModel)DataContext).DeleteProfileCommand}"
                                                    CommandParameter="{Binding}">
                                                <Button.Content>
                                                    <fluent:SymbolIcon Symbol="Delete" />
                                                </Button.Content>
                                            </Button>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <Button Width="120" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding AddProfile}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <fluent:SymbolIcon Symbol="Add" />
                                    <TextBlock Text="Add profile" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="Timers">
                <StackPanel Orientation="Vertical" Margin="0 10" Spacing="5">
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <DataGrid x:Name="DataGrid"
                                  ItemsSource="{Binding Timers}"
                                  GridLinesVisibility="All"
                                  BorderBrush="Black"
                                  CanUserSortColumns="True"
                                  BorderThickness="0.5"
                                  MaxHeight="400"
                                  SelectedItem="{Binding SelectedTimerViewModel}"
                                  SelectionMode="Single"
                                  HorizontalScrollBarVisibility="Auto">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Name" Binding="{Binding Name}" />
                                <DataGridTemplateColumn Header="Time">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <TimePicker UseSeconds="True" SelectedTime="{Binding Time}">
                                                <TimePicker.Resources>
                                                    <x:Double x:Key="TimePickerThemeMinWidth">120</x:Double>
                                                </TimePicker.Resources>
                                            </TimePicker>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridCheckBoxColumn Header="Enabled" Binding="{Binding IsEnabled}" />
                                <DataGridTemplateColumn>
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal">
                                                <Button Width="30" Height="30"
                                                        HorizontalContentAlignment="Center"
                                                        VerticalContentAlignment="Center"
                                                        Padding="2"
                                                        Command="{Binding $parent[DataGrid].((vm:SettingsViewModel)DataContext).DeleteTimerCommand}"
                                                        CommandParameter="{Binding}">
                                                    <Button.Content>
                                                        <fluent:SymbolIcon Symbol="Delete" />
                                                    </Button.Content>
                                                </Button>
                                            </StackPanel>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                        <StackPanel Orientation="Vertical" Margin="0">
                            <StackPanel Orientation="Vertical" Margin="5">
                                <TextBlock Text="Name" VerticalAlignment="Center" />
                                <TextBox Text="{Binding SelectedTimerViewModel.Name, Mode=TwoWay}" />
                            </StackPanel>
                            <!-- <StackPanel Orientation="Vertical" Margin="5"> -->
                            <!--     <ToolTip.Tip> -->
                            <!--         The text that will be spoken when the timer triggers. -->
                            <!--     </ToolTip.Tip> -->
                            <!--     <TextBlock Text="Speech" VerticalAlignment="Center" /> -->
                            <!--     <TextBox Text="{Binding SelectedTimerViewModel.Speech, Mode=TwoWay}" /> -->
                            <!-- </StackPanel> -->
                            <StackPanel Orientation="Vertical" Margin="5">
                                <ToolTip.Tip>
                                    If the timer is an interval timer, this is the time between each trigger.
                                    If the timer is not an interval timer, when game seconds or minutes = this time, the timer will trigger.
                                </ToolTip.Tip>
                                <TextBlock Text="Time" VerticalAlignment="Center" />
                                <TimePicker UseSeconds="True"
                                            SelectedTime="{Binding SelectedTimerViewModel.Time, Mode=TwoWay}" />
                            </StackPanel>
                            <StackPanel Orientation="Vertical" Margin="5">
                                <ToolTip.Tip>
                                    When the timer will become active and begin to trigger based on the game time
                                </ToolTip.Tip>
                                <TextBlock Text="Starts at" VerticalAlignment="Center" />
                                <TimePicker UseSeconds="True"
                                            SelectedTime="{Binding SelectedTimerViewModel.ShowAfter, Mode=TwoWay}" />
                            </StackPanel>
                            <StackPanel Orientation="Vertical" Margin="5">
                                <ToolTip.Tip>
                                    When the timer will disable itself, and no longer trigger based on the game.
                                    For example, pulling or stacking camps becomes less meaningful after a certain time.
                                </ToolTip.Tip>
                                <TextBlock Text="Expires after" VerticalAlignment="Center" />
                                <TimePicker
                                    UseSeconds="True"
                                    SelectedTime="{Binding SelectedTimerViewModel.HideAfter, Mode=TwoWay}" />
                            </StackPanel>
                            <StackPanel Orientation="Vertical" Margin="5">
                                <ToolTip.Tip>
                                    When the timer will play the audio file
                                </ToolTip.Tip>
                                <TextBlock Text="Reminder before" VerticalAlignment="Center" />
                                <TimePicker UseSeconds="True"
                                            SelectedTime="{Binding SelectedTimerViewModel.RemindAt, Mode=TwoWay}" />
                            </StackPanel>
                            <StackPanel Orientation="Vertical" Margin="5" Spacing="5">
                                <ToolTip.Tip>
                                    The audio file that will be played when the timer triggers if Text to Speech is disabled.
                                </ToolTip.Tip>
                                <TextBlock Text="Audio file" />
                                <TextBox IsReadOnly="True"
                                         Text="{Binding SelectedTimerViewModel.AudioFile, Mode=OneWay, Converter={StaticResource AudioFilePathConverter}}" />
                                <StackPanel Orientation="Horizontal" Spacing="5">
                                    <Button Content="Browse"
                                            Command="{Binding SelectFileCommand}"
                                            CommandParameter="{Binding ElementName=SettingsUserControl }" />
                                    <Button Content="Play"
                                            Command="{Binding PlayAudioCommand}"
                                            CommandParameter="{Binding ElementName=SettingsUserControl }" />
                                </StackPanel>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <StackPanel Orientation="Vertical" Margin="5">
                                    <TextBlock Text="Enabled" VerticalAlignment="Center" />
                                    <CheckBox IsChecked="{Binding SelectedTimerViewModel.IsEnabled, Mode=TwoWay}" />
                                </StackPanel>
                                <StackPanel Orientation="Vertical" Margin="5">
                                    <TextBlock Text="Muted" VerticalAlignment="Center" />
                                    <CheckBox IsChecked="{Binding SelectedTimerViewModel.IsMuted, Mode=TwoWay}" />
                                </StackPanel>
                                <StackPanel Orientation="Vertical" Margin="5">
                                    <TextBlock Text="Interval" VerticalAlignment="Center" />
                                    <CheckBox IsChecked="{Binding SelectedTimerViewModel.IsInterval, Mode=TwoWay}" />
                                </StackPanel>
                                <StackPanel Orientation="Vertical" Margin="5">
                                    <ToolTip.Tip>
                                        Requires manual reset after each trigger.
                                        This is useful for timers that are not based on a set interval. e.g Roshan or Tormentor respawn times.
                                    </ToolTip.Tip>
                                    <TextBlock Text="Manual" VerticalAlignment="Center" />
                                    <CheckBox IsChecked="{Binding SelectedTimerViewModel.IsManualReset, Mode=TwoWay}" />
                                </StackPanel>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <Button Width="120" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding AddTimer}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <fluent:SymbolIcon Symbol="Add" />
                                    <TextBlock Text="Add timer" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                        <Button Width="120" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding DefaultTimers}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <fluent:SymbolIcon Symbol="BookDefault" />
                                    <TextBlock Text="Default timers" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="Integration">

                <StackPanel Margin="0 10" Orientation="Vertical">

                    <Grid Margin="5" RowDefinitions="*,*,*,*" ColumnDefinitions="100,Auto" VerticalAlignment="Center">

                        <Label Grid.Row="0" Grid.Column="0" VerticalAlignment="Center">Mode</Label>
                        <ComboBox Grid.Row="0" Grid.Column="1"
                                  SelectedItem="{Binding SelectedTimerMode, Mode=TwoWay}"
                                  ItemsSource="{Binding TimerModes, Mode=OneTime}"
                                  Width="150">
                            <ComboBox.ItemTemplate>
                                <DataTemplate DataType="timers:TimerStrategy">
                                    <TextBlock Text="{Binding Name}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <Label Grid.Row="1" Grid.Column="0" VerticalAlignment="Center">Demo Muted</Label>
                        <CheckBox Grid.Row="1" Grid.Column="1" VerticalAlignment="Center"
                                  IsChecked="{Binding DemoMuted, Mode=TwoWay}" />
                    </Grid>

                    <StackPanel Margin="5" Orientation="Vertical" Spacing="5">
                        <Button Width="140" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding InstallCommand}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <TextBlock Text="Install GSI" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                        <Button Width="140" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding OpenFolderCommand}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <TextBlock Text="Open Folder" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                        <Button Width="140" Height="30"
                                HorizontalContentAlignment="Center"
                                VerticalContentAlignment="Center"
                                Padding="2"
                                Command="{Binding InstallCommand}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal" Spacing="2">
                                    <TextBlock Text="Uninstall GSI" VerticalAlignment="Center" />
                                </StackPanel>
                            </Button.Content>
                        </Button>
                    </StackPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="Guide">
                <ScrollViewer
                    VerticalScrollBarVisibility="Visible"
                    HorizontalScrollBarVisibility="Visible">
                    <StackPanel Orientation="Vertical"
                                Margin="0 10"
                                Spacing="5">

                        <!-- GSI -->
                        <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                            <TextBlock Margin="0 5" FontSize="18" FontWeight="Bold">
                                What is Game State Integration?
                            </TextBlock>
                            <TextBlock TextWrapping="Wrap" Width="750">
                                Game State Integration (GSI), is a feature in Dota 2 that allows external applications to read the game state.
                                This application uses GSI to provide helpful information and reminders for some in-game events.
                            </TextBlock>
                        </StackPanel>

                        <!-- Install / Uninstall -->
                        <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                            <TextBlock Margin="0 5" FontSize="18" FontWeight="Bold">
                                Configuration Installation
                            </TextBlock>
                            <TextBlock TextWrapping="Wrap" Width="750">
                                When the application is started, it will check if the GSI file is installed and automatically install it if it is not.
                                You can also install it from the Integration Tab, clicking the Install GSI button will copy the necessary file to the Dota 2 game folder.
                                To remove the file, click the Uninstall GSI button or delete the file manually.
                                <Bold>The application will not work without this file.</Bold>
                            </TextBlock>
                        </StackPanel>

                        <!-- Launching Dota 2 -->
                        <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                            <TextBlock Margin="0 5" FontSize="18" FontWeight="Bold">
                                Launching Dota 2
                            </TextBlock>
                            <TextBlock TextWrapping="Wrap" Width="750">
                                To use the application, you must launch Dota2 with a custom launch option.
                                The application will not work if Dota 2 is already running when the application is started without this option.
                                To do this, right-click Dota 2 in your Steam library, click Properties, and add <Bold>-gamestateintegration</Bold> to the Launch Options.
                            </TextBlock>
                        </StackPanel>

                        <!-- Timers -->
                        <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                            <TextBlock Margin="0 5" FontSize="18" FontWeight="Bold">
                                Timers
                            </TextBlock>
                            <TextBlock TextWrapping="Wrap" Width="750">
                                Timers are used to remind you of in-game events. You can add, remove, and reset timers from the Timers tab.
                                Timers can be set to trigger at a specific time or at intervals.
                                You can also set the timer to play an audio file when it triggers.
                            </TextBlock>
                        </StackPanel>

                        <!-- Audio -->
                        <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                            <TextBlock Margin="0 5" FontSize="18" FontWeight="Bold">
                                Audio
                            </TextBlock>
                            <TextBlock TextWrapping="Wrap" Width="750">
                                The application can play audio files when a timer triggers. You can set the audio file for each timer from the Timers tab.
                                The application will play the audio file when the timer triggers, the default audio files are located in the audio folder.
                                The audio files were created using Google Text-to-Speech.
                            </TextBlock>
                        </StackPanel>

                        <!-- Advanced (Showing/Hiding Timers for relevance) -->
                        <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                            <TextBlock Margin="0 5" FontSize="18" FontWeight="Bold">
                                Advanced
                            </TextBlock>
                            <TextBlock TextWrapping="Wrap" Width="750">
                                Timers can be set to show and hide based on the game time. This is useful for timers that are only relevant for a certain period.
                                For example, pulling or stacking camps becomes less meaningful after a certain time.
                            </TextBlock>
                        </StackPanel>

                    </StackPanel>
                </ScrollViewer>
            </TabItem>
        </TabControl>
    </StackPanel>
</UserControl>